const uuidv1 = require('uuid/v1');
// const bcrypt = require('bcryptjs');
const AWS = require('aws-sdk');
const REGION = 'us-east-1';
const docClient = new AWS.DynamoDB.DocumentClient({
    region: REGION
});
const DYNAMO_TABLE_NAME = 'docquest_users';
// const salt = bcrypt.genSaltSync(10);

exports.handler = (event, context, callback) => {
    if (event.body !== null && event.body !== undefined) {
        event = JSON.parse(event.body)
    }
    const timestamp = new Date().getTime();
    // const hashedPassword = bcrypt.hashSync(event.password, salt);
    let params = {
        Item: {
            "id": uuidv1(),
            "username": event.name,
            "mobile": event.mobile,
            "email": event.email,
            "password": event.password,
            "address": event.address,
            "stream": event.stream,
            "user_kind": event.userKind,
            "createdAt": timestamp,
            "updatedAt": timestamp,
        },

        TableName: DYNAMO_TABLE_NAME
    };

    docClient.put(params, function (error, data) {
        if (error) {
            console.log('error', error, data);
            callback(null, {
                statusCode: error.statusCode || 501,
                headers: {
                    'Content-Type': 'application/text',
                    'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                    "status": 0,
                    "message": "Could not create user."
                }),
            });
        } else {
            // create a response
            const response = {
                statusCode: 200,
                headers: {
                    'Content-Type': 'application/text',
                    'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                    "status": 1,
                    "message": "User created successfully."
                })
            };
            callback(null, response);
        }
    });

    // TODO implement
    // callback(null, 'Hello from Lambda');
    // passwordHash.verify('password123', hashedPassword)
};